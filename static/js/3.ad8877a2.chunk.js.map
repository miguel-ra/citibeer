{"version":3,"sources":["components/modal/Modal.module.scss","components/portal/Portal.tsx","components/modal/Modal.tsx"],"names":["module","exports","Portal","containerId","children","useState","domContainer","setDomContainer","useEffect","container","document","getElementById","createElement","setAttribute","body","appendChild","undefined","textContent","remove","ReactDOM","createPortal","Modal","closeModal","modalElement","setModalElement","activeElement","blur","focusableElements","querySelectorAll","firstFocusable","lastFocusable","length","window","addEventListener","handler","removeEventListener","event","key","contains","shiftKey","focus","preventDefault","id","className","classes","overlay","onClick","ref","element","role","aria-modal","tabIndex","modal"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,QAAU,uBAAuB,MAAQ,uB,2ECiC5CC,MA1Bf,YAAyD,IAAvCC,EAAsC,EAAtCA,YAAaC,EAAyB,EAAzBA,SAAyB,EACdC,qBADc,mBAC/CC,EAD+C,KACjCC,EADiC,KAmBtD,OAhBAC,qBAAU,WACR,IAAIC,EAAYC,SAASC,eAAeR,GAOxC,OANKM,KACHA,EAAYC,SAASE,cAAc,QACzBC,aAAa,KAAMV,GAC7BO,SAASI,KAAKC,YAAYN,IAE5BF,EAAgBE,GACT,WACLF,OAAgBS,GACZP,IAAcA,EAAUQ,aAC1BR,EAAUS,YAGb,CAACf,IAECG,EAIEa,IAASC,aAAahB,EAAUE,GAH9B,M,yBC4DIe,UA9Ef,YAAmE,IAAlDlB,EAAiD,EAAjDA,YAAamB,EAAoC,EAApCA,WAAYlB,EAAwB,EAAxBA,SAAwB,EACxBC,qBADwB,mBACzDkB,EADyD,KAC3CC,EAD2C,KAkDhE,OA/CAhB,qBAAU,WACR,GAAKe,GAAiBnB,EAAtB,CAGCM,SAASe,cAA8BC,OACxC,IAAMC,EAAoBJ,EAAaK,iBACrC,4PAEIC,EAAiBF,EAAkB,GACnCG,EAAgBH,EACpBA,EAAkBI,OAAS,GAgC7B,OADAC,OAAOC,iBAAiB,UAAWC,GAC5B,WACLF,OAAOG,oBAAoB,UAAWD,IA9BxC,SAASA,EAAQE,GAKf,GAJkB,WAAdA,EAAMC,KACRf,IAGgB,QAAdc,EAAMC,IAIV,OAAI,OAACd,QAAD,IAACA,OAAD,EAACA,EAAce,SAAS5B,SAASe,qBAMjCW,EAAMG,SACJ7B,SAASe,gBAAkBI,IAE7BC,EAAcU,QACdJ,EAAMK,kBAEC/B,SAASe,gBAAkBK,IAEpCD,EAAeW,QACfJ,EAAMK,oBAdNL,EAAMK,sBACQ,OAAdZ,QAAc,IAAdA,KAAgBW,aAqBnB,CAACpC,EAAUkB,EAAYC,IAErBnB,EAKH,eAAC,EAAD,CAAQD,YAAaA,EAArB,UACE,qBACEuC,GAAG,UACHC,UAAWC,IAAQC,QACnBC,QAAS,kBAAMxB,OAEjB,qBACEyB,IAAK,SAACC,GACAA,GACFxB,EAAgBwB,IAGpBC,KAAK,SACLC,aAAW,OACXC,UAAW,EACXR,UAAWC,IAAQQ,MATrB,SAWGhD,OArBE","file":"static/js/3.ad8877a2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"overlay\":\"Modal_overlay__2fmHD\",\"modal\":\"Modal_modal__1AX5i\"};","import { useState, useEffect, ReactNode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\ntype PortalProps = {\n  containerId: string;\n  children: ReactNode;\n};\n\nfunction Portal({ containerId, children }: PortalProps) {\n  const [domContainer, setDomContainer] = useState<HTMLElement>();\n\n  useEffect(() => {\n    let container = document.getElementById(containerId);\n    if (!container) {\n      container = document.createElement(\"div\");\n      container.setAttribute(\"id\", containerId);\n      document.body.appendChild(container);\n    }\n    setDomContainer(container);\n    return () => {\n      setDomContainer(undefined);\n      if (container && !container.textContent) {\n        container.remove();\n      }\n    };\n  }, [containerId]);\n\n  if (!domContainer) {\n    return null;\n  }\n\n  return ReactDOM.createPortal(children, domContainer);\n}\n\nexport default Portal;\n","import { ReactNode, useEffect, useState } from \"react\";\nimport Portal from \"components/portal/Portal\";\nimport classes from \"./Modal.module.scss\";\n\ntype ModalProps = {\n  containerId: string;\n  closeModal: Function;\n  children: ReactNode;\n};\n\nfunction Modal({ containerId, closeModal, children }: ModalProps) {\n  const [modalElement, setModalElement] = useState<HTMLElement>();\n\n  useEffect(() => {\n    if (!modalElement || !children) {\n      return;\n    }\n    (document.activeElement as HTMLElement).blur();\n    const focusableElements = modalElement.querySelectorAll(\n      'a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input[type=\"text\"]:not([disabled]), input[type=\"number\"]:not([disabled]), input[type=\"radio\"]:not([disabled]), input[type=\"checkbox\"]:not([disabled]), select:not([disabled])'\n    );\n    const firstFocusable = focusableElements[0] as HTMLElement;\n    const lastFocusable = focusableElements[\n      focusableElements.length - 1\n    ] as HTMLElement;\n\n    function handler(event: KeyboardEvent) {\n      if (event.key === \"Escape\") {\n        closeModal();\n      }\n\n      if (event.key !== \"Tab\") {\n        return;\n      }\n\n      if (!modalElement?.contains(document.activeElement)) {\n        event.preventDefault();\n        firstFocusable?.focus();\n        return;\n      }\n\n      if (event.shiftKey) {\n        if (document.activeElement === firstFocusable) {\n          // shift + tab\n          lastFocusable.focus();\n          event.preventDefault();\n        }\n      } else if (document.activeElement === lastFocusable) {\n        // tab\n        firstFocusable.focus();\n        event.preventDefault();\n      }\n    }\n\n    window.addEventListener(\"keydown\", handler);\n    return () => {\n      window.removeEventListener(\"keydown\", handler);\n    };\n  }, [children, closeModal, modalElement]);\n\n  if (!children) {\n    return null;\n  }\n\n  return (\n    <Portal containerId={containerId}>\n      <div\n        id=\"overlay\"\n        className={classes.overlay}\n        onClick={() => closeModal()}\n      />\n      <div\n        ref={(element) => {\n          if (element) {\n            setModalElement(element);\n          }\n        }}\n        role=\"dialog\"\n        aria-modal=\"true\"\n        tabIndex={-1}\n        className={classes.modal}\n      >\n        {children}\n      </div>\n    </Portal>\n  );\n}\n\nexport default Modal;\n"],"sourceRoot":""}